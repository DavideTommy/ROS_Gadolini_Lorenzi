1 - Leggere la bag (metodo)
2 - Rosbags: 
	1_posizione gps auto: lat x, long y, alt z (custom message 1)
	2_posizione gps ostacolo: lat x, long y, alt z (custom message 2)
	Serve un nodo per macchina (tot 2 nodi) perchè c'è una sola fonte gps
3 - Convertire da LLA in ENU (metodo)
4 - Pubblicare TF
5 - odometry macchina e target in ENU (da un hardcoded 0)
6 - calcolare distanza tra veicoli (con flag con custom message)
7 - parameter server per criteri di conversione
8 - studiare dynamic reconfigure
9 - gestione errori
10 - message filter prende i 2 messaggi dei nodi e calcola la distanza 
	e flag per ogni punto 

Notes
1 - se si sfancula il segnale gestiscilo bene (no distanza 0 tra le macchine)


-------------------------------------------------------------------------------------------------------------------------


EXECUTION:

1) Aprire terminale ed eseguire comando "roscore"
2) Aprire un altro terminale ed eseguire cd robotics, successivamente catkin_make
3) Nello stesso terminale eseguire source devel/setup.bash
4) Nello stesso terminale esegui rosrun ros_proj ros_proj
5) Seleziona il file eseguibile #1
6) In un altro terminale esegui cd robotics/src/ros_proj/src
7) Nello stesso terminale esegui rosbag play project.bag



NOTA IMPORTANTE


Se si necessita di eseguire un file .cpp diverso (ovvero che non sia odometer.cpp, cambiare il codice di odometer non necessita di cancellazioni), è necessario eliminare la cartella build da robotics, ed editare il file ros_proj/CMakeLists.txt cambiando il nome del file
alla riga add_executrables.

Eliminare la cartella build fa si che non ci siano altri eseguibili vecchi e che tutto il workspace venga generato nuovamente.


Si può usare anche il terminale di clion, basta runnare roscore e rosbag da due terminali e compilare ed eseguire come un programma normale da clion.
