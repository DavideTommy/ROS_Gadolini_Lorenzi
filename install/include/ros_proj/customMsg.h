// Generated by gencpp from file ros_proj/customMsg.msg
// DO NOT EDIT!


#ifndef ROS_PROJ_MESSAGE_CUSTOMMSG_H
#define ROS_PROJ_MESSAGE_CUSTOMMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_proj
{
template <class ContainerAllocator>
struct customMsg_
{
  typedef customMsg_<ContainerAllocator> Type;

  customMsg_()
    : E(0.0)
    , N(0.0)
    , Up(0.0)
    , topic()  {
    }
  customMsg_(const ContainerAllocator& _alloc)
    : E(0.0)
    , N(0.0)
    , Up(0.0)
    , topic(_alloc)  {
  (void)_alloc;
    }



   typedef float _E_type;
  _E_type E;

   typedef float _N_type;
  _N_type N;

   typedef float _Up_type;
  _Up_type Up;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;





  typedef boost::shared_ptr< ::ros_proj::customMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_proj::customMsg_<ContainerAllocator> const> ConstPtr;

}; // struct customMsg_

typedef ::ros_proj::customMsg_<std::allocator<void> > customMsg;

typedef boost::shared_ptr< ::ros_proj::customMsg > customMsgPtr;
typedef boost::shared_ptr< ::ros_proj::customMsg const> customMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_proj::customMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_proj::customMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_proj::customMsg_<ContainerAllocator1> & lhs, const ::ros_proj::customMsg_<ContainerAllocator2> & rhs)
{
  return lhs.E == rhs.E &&
    lhs.N == rhs.N &&
    lhs.Up == rhs.Up &&
    lhs.topic == rhs.topic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_proj::customMsg_<ContainerAllocator1> & lhs, const ::ros_proj::customMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_proj

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_proj::customMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_proj::customMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_proj::customMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_proj::customMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_proj::customMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_proj::customMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_proj::customMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bec7a41a11f3982d277a0af26541e251";
  }

  static const char* value(const ::ros_proj::customMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbec7a41a11f3982dULL;
  static const uint64_t static_value2 = 0x277a0af26541e251ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_proj::customMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_proj/customMsg";
  }

  static const char* value(const ::ros_proj::customMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_proj::customMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 E\n"
"float32 N\n"
"float32 Up\n"
"string topic\n"
;
  }

  static const char* value(const ::ros_proj::customMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_proj::customMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.E);
      stream.next(m.N);
      stream.next(m.Up);
      stream.next(m.topic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct customMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_proj::customMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_proj::customMsg_<ContainerAllocator>& v)
  {
    s << indent << "E: ";
    Printer<float>::stream(s, indent + "  ", v.E);
    s << indent << "N: ";
    Printer<float>::stream(s, indent + "  ", v.N);
    s << indent << "Up: ";
    Printer<float>::stream(s, indent + "  ", v.Up);
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_PROJ_MESSAGE_CUSTOMMSG_H
